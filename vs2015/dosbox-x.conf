[log]
logfile=log.txt
[sblaster]
#                                           sbtype: Type of Sound Blaster to emulate. 'gb' is Game Blaster.
#                                                     Possible values: sb1, sb2, sbpro1, sbpro2, sb16, sb16vibra, gb, ess688, reveal_sc400, none.
#                                           sbbase: The IO address of the Sound Blaster.
#                                                     220h to 2E0h are for use with IBM PC Sound Blaster emulation.
#                                                     D2h to DEh are for use with NEC PC-98 Sound Blaster 16 emulation.
#                                                     Possible values: 220, 240, 260, 280, 2a0, 2c0, 2e0, d2, d4, d6, d8, da, dc, de.
#                                              irq: The IRQ number of the Sound Blaster. Set to -1 to start DOSBox-X with the IRQ unassigned
#                                                     Possible values: 7, 5, 3, 9, 10, 11, 12.
#                                           mindma: Minimum DMA transfer left to increase attention across DSP blocks, in milliseconds. Set to -1 for default.
#                                                     There are some DOS games/demos that use single-cycle DSP playback in their music tracker and they micromanage
#                                                     the DMA transfer per block poorly in a way that causes popping and artifacts. Setting this option to 0 for
#                                                     such DOS applications may reduce audible popping and artifacts.
#                                         irq hack: Specify a hack related to the Sound Blaster IRQ to avoid crashes in a handful of games and demos.
#                                                         none                   Emulate IRQs normally
#                                                         cs_equ_ds              Do not fire IRQ unless two CPU segment registers match: CS == DS. Read Dosbox-X Wiki or source code for details.
#                                              dma: The DMA number of the Sound Blaster. Set to -1 to start DOSBox-X with the DMA unassigned
#                                                     Possible values: 1, 5, 0, 3, 6, 7.
#                                             hdma: The High DMA number of the Sound Blaster. Set to -1 to start DOSBox-X with the High DMA unassigned
#                                                     Possible values: 1, 5, 0, 3, 6, 7.
#                                   pic unmask irq: Start the DOS virtual machine with the Sound Blaster IRQ already unmasked at the PIC.
#                                                     Some early DOS games/demos that support Sound Blaster expect the IRQ to fire but make
#                                                     no attempt to unmask the IRQ. If audio cuts out no matter what IRQ you try, then try
#                                                     setting this option.
#                                                     Option is needed for:
#                                                        Public NMI "jump" demo (1992)
#                                   enable speaker: Start the DOS virtual machine with the Sound Blaster speaker enabled.
#                                                     Sound Blaster Pro and older cards have a speaker disable/enable command.
#                                                     Normally the card boots up with the speaker disabled. If a DOS game or demo
#                                                     attempts to play without enabling the speaker, set this option to true to
#                                                     compensate. This setting has no meaning if emulating a Sound Blaster 16 card.
#                                       enable asp: If set, emulate the presence of the Sound Blaster 16 Advanced Sound Processor/Creative Sound Processor chip.
#                                                     NOTE: This only emulates it's presence and the basic DSP commands to communicate with it. Actual ASP/CSP functions are not yet implemented.
#                                disable filtering: By default DOSBox-X filters Sound Blaster output to emulate lowpass filters and analog output limitations.
#                                                     Set this option to true to disable filtering. Note that doing so disables emulation of the Sound Blaster Pro
#                                                     output filter and ESS AudioDrive lowpass filter.
# dsp write buffer status must return 0x7f or 0xff: If set, force port 22Ch (DSP write buffer status) to return 0x7F or 0xFF. If not set, the port
#                                                     may return 0x7F or 0xFF depending on what type of Sound Blaster is being emulated.
#                                                     Set this option for some early DOS demos that make that assumption about port 22Ch.
#                                                     Option is needed for:
#                                                        Overload by Hysteria (1992) - Audio will crackle/saturate (8-bit overflow) except when sbtype=sb16
#                             pre-set sbpro stereo: Start the DOS virtual machine with the Sound Blaster Pro stereo bit set (in the mixer).
#                                                     A few demos support Sound Blaster Pro but forget to set this bit.
#                                                     Option is needed for:
#                                                        Inconexia by Iguana (1993)
#                                          sbmixer: Allow the Sound Blaster mixer to modify the DOSBox-X mixer.
#                                          oplmode: Type of OPL emulation. On 'auto' the mode is determined by the 'sbtype' setting.
#                                                     All OPL modes are AdLib-compatible, except for 'cms' (set 'sbtype=none' with 'cms' for a Game Blaster).
#                                                     Possible values: auto, cms, opl2, dualopl2, opl3, opl3gold, none, hardware, hardwaregb.
#             adlib force timer overflow on detect: If set, Adlib/OPL emulation will signal 'overflow' on timers after 50 I/O reads.
#                                                     This is a temporary hack to work around timing bugs noted in DOSBox-X. Certain
#                                                     games (Wolfenstein 3D) poll the Adlib status port a fixed number of times assuming
#                                                     that the poll loop takes long enough for the Adlib timer to run out. If the game
#                                                     cannot reliably detect Adlib at higher cycles counts, but can reliably detect at
#                                                     lower cycles counts, set this option.
#                                                     NOTE: Technically this decreases emulation accuracy, however it also reflects the
#                                                           fact that DOSBox-X's I/O timing code needs some work to better match the
#                                                           slowness of the ISA bus per I/O read in consideration of DOS games. So this
#                                                           option is ON by default.
#                                           oplemu: Provider for the OPL emulation. 'compat' might provide better quality.
#                                                     'nuked' is the most accurate (but the most CPU-intensive). See oplrate as well.
#                                                     Possible values: default, compat, fast, nuked, mame.
#                                          oplrate: Sample rate of OPL music emulation. Use 49716 for highest quality (set the mixer rate accordingly).
#                                                     Possible values: 44100, 49716, 48000, 32000, 22050, 16000, 11025, 8000.
#                                     hardwarebase: base address of the real hardware Sound Blaster:
#                                                     210,220,230,240,250,260,280
#                              force dsp auto-init: Treat all single-cycle DSP commands as auto-init to keep playback going.
#                                                     This option is a workaround for DOS games or demos that use single-cycle DSP playback commands and
#                                                     have problems with missing the Sound Blaster IRQ under load. Do not enable unless you need this workaround.
#                                                     Needed for:
#                                                       - Extreme "lunatic" demo (1993)
#                                   force goldplay: Always render Sound Blaster output sample-at-a-time. Testing option. You probably don't want to enable this.
#                                         goldplay: Enable goldplay emulation.
#                                  goldplay stereo: Enable workaround for goldplay stereo playback. Many DOS demos using this technique
#                                                     don't seem to know they need to double the frequency when programming the DSP time constant for Pro stereo output.
#                                                     If stereo playback seems to have artifacts consider enabling this option. For accurate emulation of Sound Blaster
#                                                     hardware, disable this option.
#                dsp require interrupt acknowledge: If set, the DSP will halt DMA playback until IRQ acknowledgement occurs even in auto-init mode (SB16 behavior).
#                                                     If clear, IRQ acknowledgement will have no effect on auto-init playback (SB Pro and earlier & clone behavior)
#                                                     If set to 'auto' then behavior is determined by sbtype= setting.
#                                                     This is a setting for hardware accuracy in emulation. If audio briefly plays then stops then your DOS game
#                                                     and it's not using IRQ (but using DMA), try setting this option to 'false'
#                             dsp write busy delay: Amount of time in nanoseconds the DSP chip signals 'busy' after writing to the DSP (port 2xCh). Set to -1 to use card-specific defaults.
#                                                     WARNING: Setting the value too high (above 20000ns) may have detrimental effects to DOS games that use IRQ 0 and DSP command 0x10 to play audio.
#                                                              Setting the value way too high (above 1000000ns) can cause significant lag in DOS games.
#                     blaster environment variable: Whether or not to set the BLASTER environment variable automatically at startup
#                               sample rate limits: If set (default), limit DSP sample rate to what real hardware is limited to
#                               instant direct dac: If set, direct DAC output commands are instantaneous. This option is intended as a quick fix for
#                                                     games or demos that play direct DAC music/sound from the IRQ 0 timer who a) write the DSP command
#                                                     and data without polling the DSP to ensure it's ready or b) can get locked into the IRQ 0 handler
#                                                     waiting for DSP status when instructed to play at or beyond the DSP's maximum direct DAC sample rate.
#                                                     This fix allows broken Sound Blaster code to work and should not be enabled unless necessary.
#                   stereo control with sbpro only: Default on. If set, Sound Blaster Pro stereo is not available when emulating sb16 or sb16vibra.
#                                                     If clear, sb16 emulation will honor the sbpro stereo bit. Note that Creative SB16 cards do not
#                                                     honor the stereo bit, and this option allows DOSBox-X emulate that fact. Accuracy setting.
#                              dsp busy cycle rate: Sound Blaster 16 DSP chips appear to go busy periodically at some high clock rate
#                                                     whether the DSP is actually doing anything for the system or not. This is an accuracy
#                                                     option for Sound Blaster emulation. If this option is nonzero, it will be interpreted
#                                                     as the busy cycle rate in Hz. If zero, busy cycle will not be emulated. If -1, sound
#                                                     blaster emulation will automatically choose a setting based on the sbtype= setting
#                            dsp busy cycle always: If set, the DSP busy cycle always happens. If clear, DSP busy cycle only happens when
#                                                     audio playback is running. Default setting is to pick according to the sound card.
#                              dsp busy cycle duty: If emulating SB16 busy cycle, this value (0 to 100) controls the duty cycle of the busy cycle.
#                                                     If this option is set to -1, Sound Blaster emulation will choose a value automatically according
#                                                     to sbtype=. If 0, busy cycle emulation is disabled.
#                                 io port aliasing: If set, Sound Blaster ports alias by not decoding the LSB of the I/O port.
#                                                     This option only applies when sbtype is set to sb1 or sb2 (not SBPro or SB16).
#                                                     This is a hack for the Electromotive Force 'Internal Damage' demo which apparently
#                                                     relies on this behavior for Sound Blaster output and should be enabled for accuracy in emulation.
sbtype                                           = sb16vibra
sbbase                                           = 220
irq                                              = 5
mindma                                           = -1
irq hack                                         = none
dma                                              = 1
hdma                                             = 5
pic unmask irq                                   = false
enable speaker                                   = false
enable asp                                       = false
disable filtering                                = false
dsp write buffer status must return 0x7f or 0xff = false
pre-set sbpro stereo                             = false
sbmixer                                          = true
oplmode                                          = auto
adlib force timer overflow on detect             = false
oplemu                                           = default
oplrate                                          = 44100
hardwarebase                                     = 220
force dsp auto-init                              = false
force goldplay                                   = false
goldplay                                         = true
goldplay stereo                                  = true
dsp require interrupt acknowledge                = auto
dsp write busy delay                             = -1
blaster environment variable                     = true
sample rate limits                               = true
instant direct dac                               = false
stereo control with sbpro only                   = true
dsp busy cycle rate                              = -1
dsp busy cycle always                            = -1
dsp busy cycle duty                              = -1
io port aliasing                                 = true
[midi]
#              mpu401: Type of MPU-401 to emulate.
#                        Possible values: intelligent, uart, none.
#             mpubase: The IO address of the MPU-401.
#                        Set to 0 to use a default I/O address.
#                        300h to 330h are for use with IBM PC mode.
#                        C0D0h to F8D0h (in steps of 800h) are for use with NEC PC-98 mode (MPU98).
#                        80D2h through 80DEh are for use with NEC PC-98 Sound Blaster 16 MPU-401 emulation.
#                        If not assigned (0), 330h is the default for IBM PC and E0D0h is the default for PC-98.
#                        Possible values: 0, 300, 310, 320, 330, 332, 334, 336, 340, 360, c0d0, c8d0, d0d0, d8d0, e0d0, e8d0, f0d0, f8d0, 80d2, 80d4, 80d6, 80d8, 80da, 80dc, 80de.
#          mididevice: Device that will receive the MIDI data from MPU-401.
#                        Possible values: default, win32, alsa, oss, coreaudio, coremidi, mt32, timidity, none.
#          midiconfig: Special configuration options for the device driver. This is usually the id or part of the name of the device you want to use (find the id/name with mixer/listmidi).
#                        Or in the case of coreaudio or synth, you can specify a soundfont here.
#                        When using a Roland MT-32 rev. 0 as midi output device, some games may require a delay in order to prevent 'buffer overflow' issues.
#                        In that case, add 'delaysysex', for example: midiconfig=2 delaysysex
#                        See the README/Manual for more details.
#          samplerate: Sample rate for MIDI synthesizer, if applicable.
#                        Possible values: 44100, 48000, 32000, 22050, 16000, 11025, 8000, 49716.
#              mpuirq: MPU-401 IRQ. -1 to automatically choose.
#         mt32.romdir: Name of the directory where MT-32 Control and PCM ROM files can be found. Emulation requires these files to work.
#                          Accepted file names are as follows:
#                            MT32_CONTROL.ROM or CM32L_CONTROL.ROM - control ROM file.
#                            MT32_PCM.ROM or CM32L_PCM.ROM - PCM ROM file.
# mt32.reverse.stereo: Reverse stereo channels for MT-32 output
#                        Possible values: off, on.
#        mt32.verbose: MT-32 debug logging
#                        Possible values: off, on.
#         mt32.thread: MT-32 rendering in separate thread
#                        Possible values: off, on.
#            mt32.dac: MT-32 DAC input emulation mode
#                        Nice = 0 - default
#                        Produces samples at double the volume, without tricks.
#                        Higher quality than the real devices
#                        
#                        Pure = 1
#                        Produces samples that exactly match the bits output from the emulated LA32.
#                        Nicer overdrive characteristics than the DAC hacks (it simply clips samples within range)
#                        Much less likely to overdrive than any other mode.
#                        Half the volume of any of the other modes, meaning its volume relative to the reverb
#                        output when mixed together directly will sound wrong. So, reverb level must be lowered.
#                        Perfect for developers while debugging :)
#                        
#                        GENERATION1 = 2
#                        Re-orders the LA32 output bits as in early generation MT-32s (according to Wikipedia).
#                        Bit order at DAC (where each number represents the original LA32 output bit number, and XX means the bit is always low):
#                        15 13 12 11 10 09 08 07 06 05 04 03 02 01 00 XX
#                        
#                        GENERATION2 = 3
#                        Re-orders the LA32 output bits as in later geneerations (personally confirmed on my CM-32L - KG).
#                        Bit order at DAC (where each number represents the original LA32 output bit number):
#                        15 13 12 11 10 09 08 07 06 05 04 03 02 01 00 14
#                        
#                        Possible values: 0, 1, 2, 3, auto.
#    mt32.reverb.mode: MT-32 reverb mode
#                        Possible values: 0, 1, 2, 3, auto.
#    mt32.reverb.time: MT-32 reverb decaying time
#                        Possible values: 0, 1, 2, 3, 4, 5, 6, 7.
#   mt32.reverb.level: MT-32 reverb level
#                        Possible values: 0, 1, 2, 3, 4, 5, 6, 7.
#       mt32.partials: MT-32 max partials allowed (0-256)
mpu401              = intelligent
mpubase             = 0
mididevice          = win32
midiconfig          = 1
samplerate          = 48000
mpuirq              = -1
mt32.romdir         = .\bios\MT32\CM32L
mt32.reverse.stereo = off
mt32.verbose        = off
mt32.thread         = off
mt32.dac            = 0
mt32.reverb.mode    = auto
mt32.reverb.time    = 5
mt32.reverb.level   = 5
mt32.partials       = 256
[autoexec]